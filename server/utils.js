import { load } from 'cheerio';
import Content from './models/Content.js'; // Assuming Content model exists and is the relevant model

/**
 * Enriches HTML metadata for a specific content page (e.g., social media post).
 * Used for server-side rendering or enhancing static HTML for SEO and social sharing.
 * @param {string} html - The original HTML content.
 * @param {string} slug - The slug or ID to identify the content.
 * @returns {Promise<string>} - The HTML content enriched with metadata.
 */
export const enrichMetadata = async (html, slug) => {
    try {
        if (!slug) return html;

        // Find content by slug or ID. Adjust query as needed based on Content model schema.
        // Might need findOne({ slug }) or findById(slug) depending on schema and routing.
        const content = await Content.findById(slug);

        if (!content) return html; // Return original HTML if content not found

        const $ = load(html);

        const pageTitle = `${content.topic || 'Social Media Post'} | Turbocontent`;
        const description =
            content.content.substring(0, 160) || // Use beginning of content as description
            `Engaging social media content about "${content.topic}" generated by Turbocontent for the ${content.platform} platform. Goal: ${content.goal}. Tone: ${content.tone}.`;

        // --- Update Standard Meta Tags ---
        $('title').text(pageTitle);
        $('meta[name="description"]').attr('content', description);

        // --- Update Open Graph Meta Tags (for social sharing) ---
        $('meta[property="og:title"]').attr('content', content.topic || pageTitle);
        $('meta[property="og:description"]').attr('content', description);
        $('meta[property="og:url"]').attr(
            'content',
            `${process.env.BASE_URL || 'https://turbocontent.art'}/content/${content.slug}` // Ensure BASE_URL is set
        );
        $('meta[property="og:type"]').attr('content', 'article'); // Or 'socialmediaposting' if more appropriate

        // --- Determine OG Image ---
        // Placeholder logic: Needs adjustment based on how images are stored/linked in Content model
        // Option 1: Check for an 'imageUrl' field in the Content model
        // Option 2: Parse content.content (if markdown/html) for the first image URL
        // Option 3: Use a default image
        let imageUrl =
            content.imageUrl || `${process.env.BASE_URL || 'https://turbocontent.art'}/image.png`; // Default image
        // Example parsing markdown (requires a markdown parser or regex):
        // const imageMatch = content.content.match(/!\[.*?\]\((.*?)\)/);
        // if (imageMatch && imageMatch[1]) {
        //     imageUrl = imageMatch[1];
        // }
        $('meta[property="og:image"]').attr('content', imageUrl);

        // --- Add Schema.org JSON-LD ---
        const schema = {
            '@context': 'https://schema.org',
            '@type': 'SocialMediaPosting', // Or 'Article'
            headline: content.topic || pageTitle,
            description: description,
            url: `${process.env.BASE_URL || 'https://turbocontent.art'}/content/${content.slug}`,
            image: imageUrl,
            keywords: content.keywords ? content.keywords.join(', ') : content.topic,
            author: {
                '@type': 'Organization', // Or 'Person' if linked to a user
                name: 'Turbocontent'
            },
            publisher: {
                '@type': 'Organization',
                name: 'Turbocontent',
                logo: {
                    '@type': 'ImageObject',
                    url: `${process.env.BASE_URL || 'https://turbocontent.art'}/logo.png` // Replace with actual logo URL
                }
            },
            datePublished: content.createdAt
                ? content.createdAt.toISOString()
                : new Date().toISOString(),
            dateModified: content.updatedAt
                ? content.updatedAt.toISOString()
                : new Date().toISOString(),
            mainEntityOfPage: {
                '@type': 'WebPage',
                '@id': `${process.env.BASE_URL || 'https://turbocontent.art'}/content/${content.slug}`
            }
            // Add more fields as relevant (e.g., sharedContent, interactionStatistic)
        };

        // Remove existing schema script if any, then append new one
        $('script[type="application/ld+json"]').remove();
        $('head').append(`<script type="application/ld+json">${JSON.stringify(schema)}</script>`);

        return $.html();
    } catch (error) {
        console.error('Error enriching metadata:', error);
        return html; // Return original HTML on error
    }
};

/**
 * Extracts the client IP address from request headers.
 * Considers proxy headers like 'x-real-ip' and 'x-forwarded-for'.
 * @param {object} req - The Express request object.
 * @returns {string} - The extracted IP address or an empty string.
 */
export const getIpFromRequest = (req) => {
    if (!req) return '';
    try {
        const headers = req.headers || {};
        const connection = req.connection || {};
        const socket = req.socket || {}; // Fallback for some environments

        let ips = (
            headers['x-real-ip'] ||
            headers['x-forwarded-for'] ||
            connection.remoteAddress ||
            socket.remoteAddress || // Include socket as fallback
            ''
        ).split(',');
        return ips[0].trim();
    } catch (error) {
        console.error('Error getting IP from request:', error);
        return ''; // Return empty string on error
    }
};
